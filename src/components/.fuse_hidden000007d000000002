"use client"

import { useState, useEffect } from "react"
import Image from "next/image"
import { StaticImageData } from "next/image"
import image1 from "../../public/images/image1.jpg"
import image2 from "../../public/images/image2.jpg"
import image3 from "../../public/images/image3.jpg"
import image4 from "../../public/images/image4.jpg"
import image5 from "../../public/images/image5.jpg"
import { ChevronLeft, ChevronRight } from "lucide-react"

// Interface pour les données des images
interface ImageData {
    id: number
    src: StaticImageData
}

// Tableau de données des images
const images: ImageData[] = [
  {
    id: 1,
    src: image1,
  },
  {
    id: 2,
    src: image2,
  },
  {
    id: 3,
    src: image3,
  },
  {
    id: 4,
    src: image4,
  },
  {
    id: 5,
    src: image5,
  },
]

export default function ImageSlider(): JSX.Element {
    // État pour garder une trace de l'index d'image actuel
    const [currentIndex, setCurrentIndex] = useState<number>(0)
    console.log('currentIndex: ', currentIndex)
    console.log('imagesLength: ', images.length)

    // État permettant de déterminer si l'image est survolée
    const [isHovered, setIsHovered] = useState<boolean>(false)

    // Function to show the previous slide
    const prevSlide = (): void => {
        setCurrentIndex(
            (prevIndex) => (prevIndex - 1 + images.length) % images.length
        )
    }

    // Function to show the next slide
    const nextSlide = (): void => {
        setCurrentIndex((prevIndex) => (prevIndex + 1) % images.length)
    }

    // useEffect hook to handle automatic slide transition
    useEffect(() => {
        // Start interval for automatic slide change if not hovered
        if (!isHovered) {
            const interval = setInterval(() => {
                nextSlide()
            }, 3000)

            // Cleanup the interval on component unmount
            return () => {
                clearInterval(interval)
            }
        }
    }, [isHovered])

    // Handle mouse over event
    const handleMouseOver = (): void => {
        setIsHovered(true)
    }

    // Handle mouse leave event
    const handleMouseLeave = (): void => {
        setIsHovered(false)
    }

    return (
        <div className="relative w-1/2 overflow-hidden h-[460px] m-auto">
                {/* <div className="w-1/4 left-0 h-[460px]"></div> */}
                {/* <div className="w-1/4 right-0 h-[460px]"></div> */}
            <div className="relative w-full group h-full"
                // onMouseOver={handleMouseOver}
                // onMouseLeave={handleMouseLeave}
            >
                {/* <div className="w-1/2 group"> */}
                    {images.map((item, index) => (
                        <Image
                            key={index}
                            src={item.src}
                            alt={`Slider Image ${index}`}
                            layout="fill"
                            objectFit="cover"
                            className={`absolute rounded-xl w-1/2
                                transition-all duration-500 transform ease-in-out

                                ${
                                    currentIndex === index ? 'translate-x-0' :
                                    currentIndex === index + 1 ? '-translate-x-full' :
                                    currentIndex === index - 1 ? 'translate-x-full' :
                                    currentIndex === 0 ? '-translate-x-full' :
                                    currentIndex === images.length - 1 ? 'translate-x-full' :
                                'translate-x-full'}
                            `}
                        />
                    ))}
                {/* </div> */}
            </div>
            <button
                className="absolute left-0 top-1/2 transform h-[459px] rounded-xl hover:bg-[#1a222f] mx-1 -mt-[10px] -translate-y-1/2 bg-[#111927] text-white p-2 group"
                onClick={prevSlide}
            >
                <ChevronLeft className="text-gray-400 group-hover:text-white" />
            </button>
            <button
                className="absolute right-0 top-1/2 transform h-[459px] rounded-xl hover:bg-[#1a222f] mx-1 -mt-[10px] -translate-y-1/2 bg-[#111927] text-white p-2 group"
                onClick={nextSlide}
            >
                <ChevronRight className="text-gray-400 group-hover:text-white" />
            </button>
            <div className="flex justify-center relative z-10 bottom-16">
                {images.map((_, index) => (
                    <div
                        key={index}
                        className={`h-1 w-10 mx-1
                            transition-all duration-500 ease-in-out
                            ${index === currentIndex
                                ? "bg-black rounded-xl"
                                : "bg-white rounded-xl"
                            }
                        `}
                    ></div>
                ))}
            </div>
        </div>
    )
}